{"version":3,"sources":["utils/zero-left.ts","utils/seconds-to-time.ts","components/button.tsx","utils/seconds-to-minutes.ts","components/timer.tsx","components/pomodoro-timer.tsx","hooks/use-interval.tsx","App.tsx","index.tsx"],"names":["zeroLeft","n","Math","floor","toString","padStart","secondsToTime","seconds","hours","min","sec","Button","props","onClick","className","text","secondsToMinutes","Timer","mainTime","PomodoroTimer","useState","pomodoroTime","setMainTime","timeCounting","setTimeCounting","working","setWorking","resting","setResting","Array","cycles","fill","cyclesQtdManager","setCyclesQtdManager","completedCycles","setCompletedCycles","fullWorkingTime","setFullWorkingTime","numberOfPomodoros","setNumberOfPomodoros","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","configureWork","useCallback","configureRest","long","longRestTime","shortRestTime","document","body","classList","add","remove","length","pop","App","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f063c76f.chunk.js","sourcesContent":["const zeroLeft = (n: number): string =>\n  Math.floor(n).toString().padStart(2, '0');\nexport { zeroLeft };\n","import { zeroLeft } from './zero-left';\n\nexport function secondsToTime(seconds: number): string {\n  const hours = zeroLeft(seconds / 3600);\n  const min = zeroLeft((seconds / 60) % 60);\n  const sec = zeroLeft((seconds % 60) % 60);\n  return `${hours}h${min}m${sec}s`;\n}\n","import React from 'react';\n\ninterface Props {\n  text: string;\n  onClick?: () => void;\n  className?: string;\n}\n\nexport function Button(props: Props): JSX.Element {\n  return (\n    <button onClick={props.onClick} className={props.className}>\n      {props.text}\n    </button>\n  );\n}\n","import { zeroLeft } from './zero-left';\n\nexport function secondsToMinutes(seconds: number): string {\n  const min = zeroLeft((seconds / 60) % 60);\n  const sec = zeroLeft((seconds % 60) % 60);\n  return `${min}:${sec}`;\n}\n","import React from 'react';\nimport { secondsToMinutes } from '../utils/seconds-to-minutes';\n\ninterface Props {\n  mainTime: number;\n}\n\nexport function Timer(props: Props): JSX.Element {\n  return <div className=\"timer\">{secondsToMinutes(props.mainTime)}</div>;\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useInterval } from '../hooks/use-interval';\nimport { secondsToTime } from '../utils/seconds-to-time';\nimport { Button } from './button';\nimport { Timer } from './timer';\n\ninterface Props {\n  pomodoroTime: number;\n  shortRestTime: number;\n  longRestTime: number;\n  cycles: number;\n}\n\nexport function PomodoroTimer(props: Props): JSX.Element {\n  const [mainTime, setMainTime] = useState(props.pomodoroTime);\n  const [timeCounting, setTimeCounting] = useState(false);\n  const [working, setWorking] = useState(false);\n  const [resting, setResting] = useState(false);\n  const [cyclesQtdManager, setCyclesQtdManager] = useState(\n    new Array(props.cycles - 1).fill(true),\n  );\n  const [completedCycles, setCompletedCycles] = useState(0);\n  const [fullWorkingTime, setFullWorkingTime] = useState(0);\n  const [numberOfPomodoros, setNumberOfPomodoros] = useState(0);\n\n  useInterval(\n    () => {\n      setMainTime(mainTime - 1);\n      if (working) setFullWorkingTime(fullWorkingTime + 1);\n    },\n    timeCounting ? 1000 : null,\n  );\n\n  const configureWork = useCallback(() => {\n    setTimeCounting(true);\n    setWorking(true);\n    setResting(false);\n    setMainTime(props.pomodoroTime);\n    //audioStartWorking.play();\n  }, [\n    setTimeCounting,\n    setWorking,\n    setResting,\n    setMainTime,\n    props.pomodoroTime,\n  ]);\n\n  const configureRest = useCallback(\n    (long: boolean) => {\n      setTimeCounting(true);\n      setWorking(false);\n      setResting(true);\n\n      if (long) {\n        setMainTime(props.longRestTime);\n      } else {\n        setMainTime(props.shortRestTime);\n      }\n\n      //audioStopWorking.play();\n    },\n    [\n      setTimeCounting,\n      setWorking,\n      setResting,\n      setMainTime,\n      props.longRestTime,\n      props.shortRestTime,\n    ],\n  );\n\n  useEffect(() => {\n    if (working) document.body.classList.add('working');\n    if (resting) document.body.classList.remove('working');\n\n    if (mainTime > 0) return;\n\n    if (working && cyclesQtdManager.length > 0) {\n      configureRest(false);\n      cyclesQtdManager.pop();\n    } else if (working && cyclesQtdManager.length <= 0) {\n      configureRest(true);\n      setCyclesQtdManager(new Array(props.cycles - 1).fill(true));\n      setCompletedCycles(completedCycles + 1);\n    }\n\n    if (working) setNumberOfPomodoros(numberOfPomodoros + 1);\n    if (resting) configureWork();\n  }, [\n    working,\n    resting,\n    mainTime,\n    cyclesQtdManager,\n    numberOfPomodoros,\n    completedCycles,\n    configureRest,\n    setCyclesQtdManager,\n    configureWork,\n    props.cycles,\n  ]);\n\n  return (\n    <div className=\"pomodoro\">\n      <h2>You are: {working ? 'working' : 'resting'}</h2>\n      <Timer mainTime={mainTime} />\n      <div className=\"controls\">\n        <Button text=\"Working\" onClick={() => configureWork()} />\n        <Button text=\"Rest\" onClick={() => configureRest(false)} />\n        <Button\n          className={!working && !resting ? 'hidden' : ''}\n          text={timeCounting ? 'Pause' : 'Play'}\n          onClick={() => setTimeCounting(!timeCounting)}\n        />\n      </div>\n\n      <div className=\"details\">\n        <p>Completed Cycles: {completedCycles}</p>\n        <p>Worked Hours: {secondsToTime(fullWorkingTime)}</p>\n        <p>Number of Cycles: {numberOfPomodoros}</p>\n      </div>\n    </div>\n  );\n}\n","import { useEffect, useRef } from 'react';\n\nexport function useInterval<C extends CallableFunction>(\n  callback: C,\n  delay: number | null,\n): void {\n  const savedCallback = useRef<C>();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      if (savedCallback.current) savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from 'react';\n\nimport { PomodoroTimer } from './components/pomodoro-timer';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"container\">\n      <PomodoroTimer\n        pomodoroTime={1500}\n        shortRestTime={300}\n        longRestTime={900}\n        cycles={4}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}